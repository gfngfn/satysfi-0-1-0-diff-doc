use package open Stdlib.Logo
use package open StdJaReport

use open Local of `./local`
use open Bib of `./bib`

document (|
  title = {\SATySFi; 0.0.xユーザのための0.1.0-alpha.1手引き},
  author = {Takashi Suwa},
|) '<
  +chapter{はじめに}<
    +p{
      \SATySFi; 0.1.0-alpha.1が1–2ヵ月程度の近いうちにリリースできそうな形になってきたので，
      既に\SATySFi; 0.0.xに馴染んでいるユーザの方々向けに，
      2024年9月現在，0.0.xと比べてどのような非互換な変更が入るかをかなり簡潔に共有したいと思います．
    }
  >
  +chapter{言語設計上の非互換な変化}<
    +section{具象構文上の差異}<
      +subsection{リストとレコードの区切り記号}<
        +p{
          \emph{
            リストおよびレコードのリテラルでは，
            区切り記号としてセミコロンではなくコンマが使われるようになります
          }\footnote{
            もともとセミコロンを区切り記号にしていたのは，
            単にOCamlの具象構文に追従したためでした．
            OCamlの場合はタプルに括弧が必須ではなく
            `a, b` と書いただけでタプル扱いとなる構文を採用しており，
            それゆえ `[a, b; c, d]` のようにタプルのリストが簡単に書けるなどの
            或る種の利点らしきものがありましたが，
            \SATySFi;では却ってわかりづらくなることを避けるために
            タプルは括弧を必須としており，
            特にコンマとセミコロンを区別する動機がないため，
            この機会にコンマに揃えることにしました．
          }：

          \compare(|
            old = ```
              [3; 1; 4; 1; 5; 9; 2]
            ```,
            new = ```
              [3, 1, 4, 1, 5, 9, 2]
            ```,
          |);

          \compare(|
            old = ```
              (| foo = 42; bar = `qux` |)
            ```,
            new = ```
              (| foo = 42, bar = `qux` |)
            ```,
          |);

          従来末尾セミコロンが許容されていたのと同様に，\emph{いずれも末尾コンマが許容されます}．
        }
      >
      +subsection{match式}<
        +p{
          match式が入れ子になった際のいわゆる「ぶら下がりmatch」による構文上の曖昧性を解消するために，
          \emph{match式は `end` というトークンを最後につける構文に変更されます}：

          \compare(|
            old = ```
              match opt1 with
              | None ->
                  ( match opt2 with
                    | None     -> y
                    | Some(x2) -> f x2
                  )
              | Some(x1) ->
                  f x1
            ```,
            new = ```
              match opt1 with
              | None ->
                  match opt2 with
                  | None     -> y
                  | Some(x2) -> f x2
                  end
              | Some(x1) ->
                  f x
              end
            ```,
          |);
        }
      >
      +subsection{モジュールのローカルなオープン}<
        +p{
          OCamlに倣い，\emph{ローカルなモジュールのオープンは先頭に `let` をつけます}：

          \compare(|
            old = ```
              open Nat in
              succ (succ zero)
            ```,
            new = ```
              let open Nat in
              succ (succ zero)
            ```,
          |);
        }
      >
      +subsection{型コンストラクタの前置}<
        +p{
          OCamlなどとは異なり，
          \emph{型コンストラクタは型引数に対して前置するようになります}：

          \compare(|
            old = ```
              type 'a foo =
                | Bar of int list
                | Qux
            ```,
            new = ```
              type foo 'a =
                | Bar of list int
                | Qux
            ```,
          |);

          これは主に式の函数適用が函数→引数の順であるのと揃えることを意図しています．
        }
      >
      +subsection{コマンドの型}<
        +p{
          コマンドの型は従来コンストラクタ相当のキーワード `inline-cmd`，`block-cmd`，`math-cmd` が
          後置されるように書いていましたが，
          0.1.0-alpha.1では
          \emph{型コンストラクタ相当の `inline`，`block`，`math` というキーワードが前置され，
          かつ引数の型はコンマ区切りで書かれるようになります}：

          \compare(|
            old = ```
              val \emph : [inline-text] inline-cmd
              val +section : [inline-text; block-text] block-cmd
              val \oplus : [] math-cmd
            ```,
            new = ```
              val \emph : inline [inline-text]
              val +section : block [inline-text, block-text]
              val \oplus : math []
            ```
          |);
        }
      >
    >
    +section{ソースファイルとトップレベル定義}<
      +p{
        0.1.0-alpha.1のドキュメントファイル（拡張子が `.saty` の入力ファイル）は
        0.0.xとほぼ変わらず，構文としては（プリアンブルの後に）式をひとつ書けるファイルです：

        \compare(|
          old = ```
            @require: stdjareport

            document (|
              title = {文書例};
              author = {Takashi Suwa};
            |) '<
              +section{章題}<
                +p{0.0.xの文書の例です．}
              >
            >
          ```,
          new = ```
            use package open StdJaReport

            document (|
              title = {文書例},
              author = {Takashi Suwa},
            |) '<
              +section{章題}<
                +p{
                  0.1.0-alpha.1での文書の例です．
                  プリアンブル部分を除いてはほぼ変わりませんね．
                }
              >
            >
          ```,
        |);

        一方で，ライブラリやローカルな定義を集めたソースファイル（拡張子が `.satyh` だったり `.satyg` だったりするもの）は
        書き方が或る程度変わります．\emph{1つのソースファイル中にはモジュールの定義1つだけが書けるようになります}：

        \compare(|
          old = ```
            @require: list
            @require: option

            type foo = int

            let bar = 42

            let-rec show-list show-elem xs =
              List.fold-left-adjacent (fun s x _ next-opt -> (
                s ^ show-elem x ^
                  (if Option.is-none next-opt then ` ` else `, `#)
              )) ` ` xs

            let-inline ctx \show-ints xs =
              read-inline ctx (embed-string (show-list arabic xs))
          ```,
          new = ```
            use package open Stdlib

            module Util = struct
              type foo = int

              val bar = 42

              val rec show-list show-elem xs =
                List.fold-adjacent (fun s x _ next-opt ->
                  s ^ show-elem x ^
                    (if Option.is-none next-opt then ` ` else `, `#)
                ) ` ` xs

              val inline ctx \show-ints xs =
                read-inline ctx (embed-string (show-list arabic xs))
            end
          ```,
        |);

        したがって\emph{トップレベルの値の束縛は必ずモジュールのメンバとなり，
        具象構文としても先頭のトークンを `let` ではなく `val` で書くように変更されます}．
        もともと `let-rec` と書いていたものは `val rec` に，
        `let-mutable` と書いていたものは `val mutable` に，
        `let-inline` と書いていたものは `val inline` に，
        `let-block` と書いていたものは `val block` に，
        それぞれ変わります．
        ローカルな変数束縛の `let` は `let` のままですが，
        `let-rec` と `let-mutable` はやはり `let rec`，`let mutable` と2トークンになります．
      }
    >
    +section{型つけの変更}<
      +subsection{`page` 型の廃止}<
        +p{
          0.0.xには用紙サイズ指定のために `A4Paper` などのコンストラクタをもつ `page` 型がありましたが，
          これは `length * length` で事足りるため廃止します．
          代わりに，標準ライブラリに `Stdlib.PaperSize` というモジュールが追加され，
          プリアンブルに `use package open Stdlib` と記載すれば `PaperSize.a4` などが使えるようになります．
        }
      >
      +subsection{`graphics` 型の変更}<
        +p{
          従来，グラフィックス相当のデータは `graphics list` 型の式で構築されていました．
          しかし，`graphics` 型と `graphics list` 型との区別はせいぜい実装の都合でしかなく，
          いちいちリストなのか単一なのかをユーザ側で意識せねばならないのは不自然でした．
          そこで，0.1.0-alpha.1 では
          `unite-graphics : list graphics -> graphics`
          というプリミティブによってリストが（後方の要素ほど紙面上で後に描画されるものとして）
          単一のグラフィックスへと潰せるようにし，
          `graphics` 型のみがグラフィックスのデータを扱う主軸の型であるように改めました．
          これに伴い，例えばプリミティブ `inline-graphics` の型も

          `length -> length -> length -> (point -> graphics list) -> inline-boxes`

          から

          `length -> length -> length -> (point -> graphics) -> inline-boxes`

          に改まりました．
        }
      >
      +subsection{`math-char-class` 型の拡張}<
        +p{
          \emph{数式の文字クラスを表す `math-char-class` 型に，
          サンセリフ体とタイプライタ体に関する5つのコンストラクタ
          `MathSansSerif`，
          `MathBoldSansSerif`，
          `MathItalicSansSerif`，
          `MathBoldItalicSansSerif`，
          `MathTypewriter`
          が追加されます}．
          これにより，Unicodeコードポイントが与えられている
          数式文字クラスはひととおり揃いました．
        }
      >
      +subsection{数式の型と数式コマンドの意味論}<
        +p{
          0.0.xでは，数式には一律に `math` 型がつけられ，
          コマンドには `\frac : [math; math] math-cmd` などという型つけが為されていました．
          0.1.0-alpha.1では数式の型つけが大きく変わり，
          まずインラインやブロックと同様に\emph{`math-text` 型と `math-boxes` 型の区別ができました}．
          前者は原稿上に書かれた数式を扱う型で，後者は“既に組まれた”数式の型に相当します．
          \emph{これに伴い `read-math : context -> math-text -> math-boxes` というプリミティブが用意され，
          数式コマンドの定義は通常の引数とともに `context` 型の“第0引数” を受け取り
          `math-boxes` 型の値を返すような定式化に変わります}：

          \compare(|
            old = ```
              let-math \frac m1 m2 =
                math-frac m1 m2
            ```,
            new = ```
              val math ctx \frac mt1 mt2 =
                let mb1 = read-math ctx mt1 in
                let mb2 = read-math ctx mt2 in
                math-frac ctx mb1 mb2
            ```,
          |);
        }
      >
      +subsection{型註釈}<
        +p{
          従来，完全な型推論ができることに加えて構文の制限が厳しかったため，型註釈が書かれることはほとんどありませんでした．
          0.1.0-alpha.1では，OCamlによく似た構文で型註釈を書けるようになる予定です：

          \compare(|
            old = ```
              let add : int -> int -> int
                | m n = m + n
            ```,
            new = ```
              val add (m : int) (n : int) : int =
                m + n
            ```,
          |);

          型変数は，定義される値の識別子の直後に並べることで量化されて型註釈中で使えるようになり，
          これにより多相型の型註釈も書けます．
          既にスコープに含まれているものと同名の型変数を新たに導入することはできません：

          \compare(|
            old = ```
              let-rec fold f acc ys =
                match ys with
                | []      -> acc
                | x :: xs -> fold f (f acc x) xs
            ```,
            new = ```
              val rec fold 'a 'b
                  (f : 'a -> 'b -> 'a) (acc : 'a) (ys : list 'b) : 'a =
                match ys with
                | []      -> acc
                | x :: xs -> fold f (f acc x) xs
                end
            ```,
          |);
        }
      >
      +subsection{レコード型の多相性}<
        +p{
          レコードの型つけは，典型的なユースケースにはほとんど影響がありませんが，
          体系としてはかなり根本的に変わりました．
          具体的には，従来はSML\#と同様に\cite[`Ohori1995`];に基づいた体系を採用していましたが，
          \emph{列多相}ベースの体系である \cite[`GasterJones1996`]; に基づくものに切り替えました．
          従来は `constraint 'a :: (| foo : int |)` という型変数へのカインドづけによって
          「`'a` は少なくとも `foo : int` というフィールドを持っているような任意のレコード型である」
          という多相性を表現していましたが，0.1.0-alpha.1ではこうした多相性は列変数を使って
          `(| foo : int | ?'r |)` という具合に表現されるようになります．
          また，このとき列変数 `?'r` が `foo` というラベルを持っていないことを表すために，
          `?'r :: (| foo |)` というカインドづけが行なわれるようになります．
          型変数には一律で `o` というカインドがつく一方で，
          列変数にはその列変数が持たないラベルを集めた有限集合のカインドがつきます．
        }
      >
    >
    +section{ラベルつきオプション引数}<
      +p{
        詳細の解説は\cite[`gfngfn-labeled`];に譲りますが，
        オプション引数がラベルつきになります：

        \compare(|
          old = ```
            +section?:(`sec:sample`)?:(`Sample`){Sample}<
             +p{章の本文です．}
            >
          ```,
          new = ```
            +section?(ref = `sec:sample`, outline = `Sample`){Sample}<
             +p{章の本文です．}
            >
          ```,
        |);
      }
    >
    +section{モジュールシステム}<
      +p{
        おそらく最も大きく変わるのがこのモジュールシステムで，
        大幅に一般化され理論的にも筋の良い形になりました．
      }
      +subsection{`direct` の廃止}<
        +p{
          従来は，シグネチャ中で `val \foo` のかわりに `direct \foo` と書くと，
          ストラクチャ `Bar` のメンバとして定義されていながらも，
          そのストラクチャの外で `\Bar.foo` だけでなくその識別子単独である `\foo` がスコープに入るようになっていました．
          つまり，ストラクチャ外から見ると，勝手にその識別子についてのみ勝手に `open` されるような仕組みでした．
          これは典型的な状況では幾分か便利ではあったものの，
          コマンド名の衝突に脆弱なため結局のところ使う側が `open` で制御できた方がよく，
          しかもファンクタなどには一般化しづらい仕組みなので，このたび廃止することにしました．
        }
      >
      +subsection{シグネチャづけのトークンを `:` から `:>` へ}<
        +p{
          Standard MLの構文に倣い，\emph{opaque signature ascriptionの記述は `:` ではなく `:>` で書くようになります}．
          詳しくは次節以降の例をご参照ください．
        }
      >
      +subsection{実体が公開される型}<
        +p{
          従来のストラクチャでは，シグネチャをつけると型のメンバが必ず実体非公開の抽象型扱いになっていましたが，
          Standard MLやOCamlなどと同様に，実体をシグネチャにも記載することで公開できるようになりました．
        }
      >
      +subsection{生成的ファンクタ}<
      >
    >
    +section{多段階計算}<
    >
  >
  +chapter{エコシステムSaphe}<
  >
  +chapter{テスト機構}<
  >
  +chapter{今後入りそうな変更}<
  >
  +chapter{参考文献}<
    +bibliography[
      (`GasterJones1996`, in-proceedings (|
        author = {| Benedict R. Gaster | Mark P. Jones |},
        title = {A polymorphic type system for extensible records and variants},
        booktitle = {Technical Report NOTTCS-TR-96-3, Department of Computer Science, University of Nottingham},
        year = 1996,
      |)),
      (`Ohori1995`, in-proceedings ?(
        volume = {17},
        number = {6},
        pages = (844, 895),
      ) (|
        author = {| Atsushi Ohori |},
        title = {A polymorphic record calculus and its compilation},
        booktitle = {ACM Transactions on Programming Languages and Systems},
        year = 1995,
      |)),
      (`gfngfn-labeled`, web-site (|
        author = {| Takashi Suwa |},
        title = {\SATySFi; v0.1.0に向けたラベルつきオプション引数の型システム},
        url = `https://gfngfn.github.io/ja/posts/2022-05-22-a-type-system-of-labeled-optional-parameters-for-satysfi/`,
        year = 2022,
      |))
    ];
  >
>
